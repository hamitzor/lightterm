const sessionManager = require('../session-manager/session-manager')

/* Controller that creates a session using SessionManager class and sends id back to client */
exports.create = (req, res) => {
   res.json({
      status: 'OK',
      response: {
         sessionId: sessionManager.createSession({ cols: req.params.cols, rows: req.params.rows })
      }
   })
}

/* Controller that resizes screen of an existing session by using 'sessionId' provided by the client */
exports.resize = (req, res) => {
   sessionManager.resize({ sessionId: req.params.sessionId, cols: req.params.cols, rows: req.params.rows })
   res.json({
      status: 'OK',
      response: {}
   })
}

/* Controller that creates a persistent connection with the client. With the help of this persistent connection,
client can send and recieve real-time messages to the terminal emulator. Client should create a session before
connecting it. */
exports.connect = (ws, req) => {
   const sessionId = req.params.sessionId
   const session = sessionManager.getSession(sessionId)

   /* Send the first outputs generated by the emulator that client missed when it created the session. */
   ws.send(session.logs)


   /* A bufferring mechanism is used for preventing high traffic between client and server. Outputs are not directly
   sent to the client. All data first stored in a buffer and every 25 miliseconds, data in the buffer is sent to 
   client and the buffer is cleared. */
   let buffer = []
   let timeout = null

   session.emulator.on('data', function (data) {
      buffer.push(data)
      if (!timeout) {
         timeout = setTimeout(() => {
            try {
               ws.send(buffer.join(''))
               buffer = []
               timeout = null
            } catch (e) {
               console.log('Connection is already closed')
            }
         }, 25)
      }
   })

   /* All messages from client are directly written to the emulator standart input. */
   ws.on('message', function (msg) {
      session.emulator.write(msg)
   })

   /* If the connection is lost then the emulator process is killed and the session is destroyed.*/
   ws.on('close', function () {
      session.emulator.kill()
      sessionManager.deleteSession(sessionId)
      console.log('Closed terminal ' + sessionId)
   })
}